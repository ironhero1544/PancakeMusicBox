package com.example.pancakemusicbox.ui.components.player

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Divider
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Switch
import androidx.compose.material3.SwitchDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.example.pancakemusicbox.R
import com.example.pancakemusicbox.model.Track

/**
 * 설정 탭 - EQ 및 오디오 처리 설정 컴포넌트
 */
@Composable
fun SettingsTab(
    track: Track,
    onEqClick: () -> Unit,
    onSettingChange: (String, Any) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        // EQ 섹션
        SettingsSection(
            title = "EQ 및 오디오 처리",
            content = {
                // EQ 버튼
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .padding(vertical = 8.dp)
                        .clip(RoundedCornerShape(8.dp))
                        .border(
                            width = 1.dp,
                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f),
                            shape = RoundedCornerShape(8.dp)
                        )
                        .clickable(onClick = onEqClick),
                    contentAlignment = Alignment.Center
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_equalizer),
                            contentDescription = "Equalizer",
                            tint = MaterialTheme.colorScheme.primary
                        )
                        
                        Spacer(modifier = Modifier.width(8.dp))
                        
                        Text(
                            text = "파라메트릭 EQ 열기",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }
                }
            }
        )
        
        // 오디오 품질 설정
        SettingsSection(
            title = "오디오 품질 설정",
            content = {
                // 비트 뎁스 선택
                SettingsDropdownItem(
                    title = "비트 뎁스",
                    currentValue = "${track.audioQuality.bitDepth}bit",
                    options = listOf("16bit", "24bit", "32bit"),
                    onOptionSelected = { newValue ->
                        val bitDepth = newValue.replace("bit", "").toInt()
                        onSettingChange("bitDepth", bitDepth)
                    }
                )
                
                // 샘플링 레이트 선택
                SettingsDropdownItem(
                    title = "샘플링 레이트",
                    currentValue = "${track.audioQuality.sampleRate / 1000}kHz",
                    options = listOf("44.1kHz", "48kHz", "96kHz", "192kHz"),
                    onOptionSelected = { newValue ->
                        val sampleRate = newValue.replace("kHz", "").toDouble().times(1000).toInt()
                        onSettingChange("sampleRate", sampleRate)
                    }
                )
            }
        )
        
        // 볼륨 관리 설정
        SettingsSection(
            title = "볼륨 관리 (LUFS 기반)",
            content = {
                // 볼륨 정규화 설정
                var volumeNormalization by remember { mutableStateOf(true) }
                SettingsSwitchItem(
                    title = "볼륨 정규화",
                    description = "트랙 간 일관된 볼륨 레벨 유지",
                    isChecked = volumeNormalization,
                    onCheckedChange = {
                        volumeNormalization = it
                        onSettingChange("volumeNormalization", it)
                    }
                )
                
                // 타겟 LUFS 설정
                if (volumeNormalization) {
                    var lufsValue by remember { mutableFloatStateOf(-14f) }
                    Text(
                        text = "타겟 LUFS: ${lufsValue.toInt()} LUFS",
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.padding(top = 8.dp)
                    )
                    
                    Slider(
                        value = lufsValue,
                        onValueChange = {
                            lufsValue = it
                            onSettingChange("targetLufs", it.toInt())
                        },
                        valueRange = -23f..-9f,
                        steps = 13,
                        modifier = Modifier.padding(vertical = 8.dp),
                        colors = SliderDefaults.colors(
                            thumbColor = MaterialTheme.colorScheme.primary,
                            activeTrackColor = MaterialTheme.colorScheme.primary
                        )
                    )
                }
            }
        )
        
        // 하드웨어 관리
        SettingsSection(
            title = "하드웨어 관리",
            content = {
                // 현재 연결된 하드웨어 정보
                Text(
                    text = "현재 연결: 내장 스피커",
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier.padding(vertical = 4.dp)
                )
                
                // 자동 설정 전환
                var autoHardwareSwitching by remember { mutableStateOf(true) }
                SettingsSwitchItem(
                    title = "하드웨어별 자동 설정 전환",
                    description = "연결된 오디오 장치에 맞게 자동으로 설정 조정",
                    isChecked = autoHardwareSwitching,
                    onCheckedChange = {
                        autoHardwareSwitching = it
                        onSettingChange("autoHardwareSwitching", it)
                    }
                )
            }
        )
        
        // 하단 여백
        Spacer(modifier = Modifier.height(16.dp))
    }
}

/**
 * 설정 섹션 컴포넌트
 */
@Composable
fun SettingsSection(
    title: String,
    content: @Composable () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
    ) {
        // 섹션 헤더
        Text(
            text = title,
            style = MaterialTheme.typography.titleMedium,
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(vertical = 8.dp)
        )
        
        // 섹션 내용
        content()
        
        // 구분선
        Divider(
            color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.1f),
            thickness = 1.dp,
            modifier = Modifier.padding(top = 16.dp)
        )
    }
}

/**
 * 설정 스위치 아이템 컴포넌트
 */
@Composable
fun SettingsSwitchItem(
    title: String,
    description: String,
    isChecked: Boolean,
    onCheckedChange: (Boolean) -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyMedium
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.6f)
            )
        }
        
        Switch(
            checked = isChecked,
            onCheckedChange = onCheckedChange,
            colors = SwitchDefaults.colors(
                checkedThumbColor = MaterialTheme.colorScheme.primary,
                checkedTrackColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f)
            )
        )
    }
}

/**
 * 설정 드롭다운 아이템 컴포넌트
 */
@Composable
fun SettingsDropdownItem(
    title: String,
    currentValue: String,
    options: List<String>,
    onOptionSelected: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    var expanded by remember { mutableStateOf(false) }
    
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
    ) {
        Text(
            text = title,
            style = MaterialTheme.typography.bodyMedium
        )
        
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 4.dp)
        ) {
            // 현재 선택된 값 표시
            Text(
                text = currentValue,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.primary,
                modifier = Modifier
                    .fillMaxWidth()
                    .clip(RoundedCornerShape(4.dp))
                    .border(
                        width = 1.dp,
                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.5f),
                        shape = RoundedCornerShape(4.dp)
                    )
                    .clickable { expanded = true }
                    .padding(horizontal = 12.dp, vertical = 8.dp)
            )
            
            // 드롭다운 메뉴
            DropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false },
                modifier = Modifier.fillMaxWidth(0.7f)
            ) {
                options.forEach { option ->
                    DropdownMenuItem(
                        text = { 
                            Text(
                                text = option,
                                style = MaterialTheme.typography.bodyMedium
                            ) 
                        },
                        onClick = {
                            onOptionSelected(option)
                            expanded = false
                        }
                    )
                }
            }
        }
    }
}
