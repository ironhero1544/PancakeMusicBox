package com.example.pancakemusicbox.ui.components.player

import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.Button
import androidx.compose.material3.Divider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableFloatStateOf
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.pancakemusicbox.R
import com.example.pancakemusicbox.model.Track

/**
 * 가사 탭 컴포넌트
 */
@Composable
fun LyricsTab(
    track: Track,
    currentPositionMs: Long,
    lyrics: List<Pair<Long, String>>?,
    onGenerateLyricsClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val listState = rememberLazyListState()
    
    // 현재 시간에 맞는 가사 인덱스 찾기
    val currentLyricsIndex = lyrics?.indexOfLast { (time, _) ->
        time <= currentPositionMs
    }?.takeIf { it >= 0 } ?: -1
    
    // 현재 가사 라인으로 스크롤
    LaunchedEffect(currentLyricsIndex) {
        if (currentLyricsIndex >= 0) {
            listState.animateScrollToItem(currentLyricsIndex)
        }
    }
    
    Box(
        modifier = modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        if (lyrics == null || lyrics.isEmpty()) {
            // 가사가 없는 경우
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "이 트랙에 가사가 없습니다",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onBackground
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Button(
                    onClick = onGenerateLyricsClick,
                    modifier = Modifier.padding(8.dp)
                ) {
                    Text("AI 가사 생성")
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "Powered by Whisper AI",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f)
                )
            }
        } else {
            // 가사 표시
            LazyColumn(
                state = listState,
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 24.dp, vertical = 16.dp)
            ) {
                itemsIndexed(lyrics) { index, (time, line) ->
                    val isCurrentLine = index == currentLyricsIndex
                    
                    Text(
                        text = line,
                        fontSize = if (isCurrentLine) 18.sp else 16.sp,
                        fontWeight = if (isCurrentLine) FontWeight.Bold else FontWeight.Normal,
                        color = if (isCurrentLine) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onBackground.copy(alpha = 0.8f),
                        textAlign = TextAlign.Center,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 8.dp)
                    )
                }
            }
        }
    }
}

/**
 * 설정 탭 컴포넌트
 */
@Composable
fun SettingsTab(
    track: Track,
    onEqClick: () -> Unit,
    onSettingChange: (String, Any) -> Unit,
    modifier: Modifier = Modifier
) {
    var targetLufs by remember { mutableIntStateOf(-14) } // 기본값 -14 LUFS
    var volumeNormalization by remember { mutableStateOf(true) }
    var autoHardwareSwitching by remember { mutableStateOf(true) }
    var bitDepth by remember { mutableIntStateOf(track.audioQuality.bitDepth) }
    var sampleRate by remember { mutableIntStateOf(track.audioQuality.sampleRate) }
    
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // 오디오 품질 정보
        Text(
            text = "현재 오디오 품질",
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold
        )
        
        Spacer(modifier = Modifier.height(8.dp))
        
        Text(
            text = "${track.audioQuality.formatName} | ${track.audioQuality.bitDepth}bit/${track.audioQuality.sampleRate / 1000}kHz | ${track.audioQuality.channels}ch",
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.primary
        )
        
        Divider(modifier = Modifier.padding(vertical = 16.dp))
        
        // EQ 버튼
        TextButton(
            onClick = onEqClick,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(
                text = "이퀄라이저 설정",
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium
            )
        }
        
        Divider(modifier = Modifier.padding(vertical = 8.dp))
        
        // 볼륨 정규화 설정
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp)
        ) {
            Text(
                text = "볼륨 정규화",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.weight(1f)
            )
            
            IconButton(
                onClick = {
                    volumeNormalization = !volumeNormalization
                    onSettingChange("volumeNormalization", volumeNormalization)
                }
            ) {
                Icon(
                    painter = painterResource(
                        id = if (volumeNormalization) R.drawable.ic_toggle_on else R.drawable.ic_toggle_off
                    ),
                    contentDescription = "Toggle volume normalization",
                    tint = if (volumeNormalization) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onBackground.copy(alpha = 0.6f)
                )
            }
        }
        
        // 볼륨 정규화가 켜져 있을 때만 LUFS 설정 표시
        if (volumeNormalization) {
            Text(
                text = "목표 LUFS: $targetLufs dB",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f),
                modifier = Modifier.padding(start = 16.dp, bottom = 8.dp)
            )
            
            Slider(
                value = targetLufs.toFloat(),
                onValueChange = { value ->
                    targetLufs = value.toInt()
                    onSettingChange("targetLufs", targetLufs)
                },
                valueRange = -23f..-9f,
                steps = 13,
                modifier = Modifier.padding(horizontal = 16.dp)
            )
        }
        
        Divider(modifier = Modifier.padding(vertical = 8.dp))
        
        // 자동 하드웨어 전환 설정
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp)
        ) {
            Text(
                text = "하드웨어별 자동 설정",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.weight(1f)
            )
            
            IconButton(
                onClick = {
                    autoHardwareSwitching = !autoHardwareSwitching
                    onSettingChange("autoHardwareSwitching", autoHardwareSwitching)
                }
            ) {
                Icon(
                    painter = painterResource(
                        id = if (autoHardwareSwitching) R.drawable.ic_toggle_on else R.drawable.ic_toggle_off
                    ),
                    contentDescription = "Toggle auto hardware switching",
                    tint = if (autoHardwareSwitching) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onBackground.copy(alpha = 0.6f)
                )
            }
        }
    }
}

/**
 * 플레이리스트 탭 컴포넌트
 */
@Composable
fun PlaylistTab(
    currentTrack: Track,
    queue: List<Track>,
    currentTrackIndex: Int,
    onTrackSelect: (Int) -> Unit,
    onMoveTrack: (Int, Int) -> Unit,
    onSaveQueue: () -> Unit,
    onClearQueue: () -> Unit,
    onShuffleQueue: () -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // 재생 목록 헤더
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        ) {
            Text(
                text = "현재 재생 목록",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.weight(1f)
            )
            
            // 플레이리스트 저장 버튼
            IconButton(onClick = onSaveQueue) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_placeholder), // 저장 아이콘
                    contentDescription = "Save playlist",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            // 셔플 버튼
            IconButton(onClick = onShuffleQueue) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_placeholder), // 셔플 아이콘
                    contentDescription = "Shuffle playlist",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
            
            // 클리어 버튼
            IconButton(onClick = onClearQueue) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_placeholder), // 클리어 아이콘
                    contentDescription = "Clear playlist",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
        }
        
        // 트랙 목록
        LazyColumn(
            modifier = Modifier.fillMaxSize()
        ) {
            itemsIndexed(queue) { index, track ->
                val isCurrentTrack = index == currentTrackIndex
                
                TrackItem(
                    track = track,
                    isPlaying = isCurrentTrack,
                    onClick = { onTrackSelect(index) },
                    onMoveUp = if (index > 0) { { onMoveTrack(index, index - 1) } } else null,
                    onMoveDown = if (index < queue.size - 1) { { onMoveTrack(index, index + 1) } } else null,
                    modifier = Modifier.fillMaxWidth()
                )
                
                if (index < queue.size - 1) {
                    Divider(
                        color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.1f),
                        modifier = Modifier.padding(horizontal = 16.dp)
                    )
                }
            }
        }
    }
}

/**
 * 플레이리스트의 트랙 아이템 컴포넌트
 */
@Composable
private fun TrackItem(
    track: Track,
    isPlaying: Boolean,
    onClick: () -> Unit,
    onMoveUp: (() -> Unit)?,
    onMoveDown: (() -> Unit)?,
    modifier: Modifier = Modifier
) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp, vertical = 12.dp)
    ) {
        // 앨범 아트 (작은 크기)
        Box(
            modifier = Modifier
                .size(48.dp)
                .padding(end = 8.dp),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                painter = painterResource(id = R.drawable.ic_placeholder),
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)
            )
            
            // 현재 재생 중인 트랙 표시
            if (isPlaying) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_playing),
                    contentDescription = "Now playing",
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(24.dp)
                )
            }
        }
        
        // 트랙 정보
        Column(
            modifier = Modifier
                .weight(1f)
                .padding(horizontal = 8.dp)
        ) {
            Text(
                text = track.title,
                style = MaterialTheme.typography.bodyMedium,
                fontWeight = if (isPlaying) FontWeight.Bold else FontWeight.Normal,
                color = if (isPlaying) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onBackground
            )
            
            Text(
                text = track.artist,
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f)
            )
        }
        
        // 트랙 이동 버튼
        Column {
            if (onMoveUp != null) {
                IconButton(
                    onClick = onMoveUp,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_placeholder), // 위로 이동 아이콘
                        contentDescription = "Move up",
                        tint = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f),
                        modifier = Modifier.size(16.dp)
                    )
                }
            } else {
                Spacer(modifier = Modifier.size(24.dp))
            }
            
            if (onMoveDown != null) {
                IconButton(
                    onClick = onMoveDown,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_placeholder), // 아래로 이동 아이콘
                        contentDescription = "Move down",
                        tint = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f),
                        modifier = Modifier.size(16.dp)
                    )
                }
            } else {
                Spacer(modifier = Modifier.size(24.dp))
            }
        }
    }
}
